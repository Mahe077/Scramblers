# -*- coding: utf-8 -*-
"""coordinate scrambling with Arnold scrambler

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16JRKTuHwZp_8vJB7cj3sOlH-GfU8XHuN
"""

import torch

a = torch.rand(3,4,4)
print(a)

print(a[0:,0,0])

a[0:,0,0] = 1
print(a)

b = torch.randn(3,4)
print(b)
print(b[:, (b > -1).all(axis=0)])

rows, cols = 16, 16  # You can adjust the dimensions as needed

# Generate a 2D matrix containing coordinates
coordinate_matrix = torch.tensor([[(i, j) for j in range(cols)] for i in range(rows)])

# Print the generated matrix
for row in coordinate_matrix:
    print(row)

# Define the 2x2 matrix for multiplication
matrix_to_multiply = torch.tensor([[1, 1], [1, 2]])
temp = coordinate_matrix.view(-1, 2)
print(temp, temp.shape, coordinate_matrix.shape)

# Perform element-wise multiplication using PyTorch's operations
result_matrix = torch.matmul(temp, matrix_to_multiply).view(rows, cols, 2)
result = torch.fmod(result_matrix,rows)

# Print the generated matrix
print(result_matrix,"\n")
print(result)

import matplotlib.pyplot as plt

# Plot the original and result matrices
fig, axs = plt.subplots(1, 2, figsize=(10, 5))

# Original Coordinate Matrix
axs[0].scatter(coordinate_matrix[:,:,0], coordinate_matrix[:,:,1], c='blue', label='Original')
axs[0].set_title('Original Coordinate Matrix')
axs[0].set_xlabel('X-axis')
axs[0].set_ylabel('Y-axis')

# Result Matrix
axs[1].scatter(result[:,:,0], result[:,:,1], c='red', label='Scrambled')
axs[1].set_title('Result Matrix (Scrambled)')
axs[1].set_xlabel('X-axis')
axs[1].set_ylabel('Y-axis')

plt.show()

inverse_mult_matrix = torch.tensor([[2,-1],[-1,1]])
print(inverse_mult_matrix)
temp_2 = result.view(-1,2)
print(temp_2)
recoverd_matrix = torch.matmul(temp_2,inverse_mult_matrix).view(rows,cols,2)
print(recoverd_matrix)
add = torch.add(recoverd_matrix,4)
print("add\n",add)
recoverd = torch.fmod(add,rows)
print(recoverd)

# Plot the original and result matrices
fig, axs = plt.subplots(1, 2, figsize=(10, 5))

# Original Coordinate Matrix
axs[0].scatter(coordinate_matrix[:,:,0], coordinate_matrix[:,:,1], c='blue', label='Original')
axs[0].set_title('Original Coordinate Matrix')
axs[0].set_xlabel('X-axis')
axs[0].set_ylabel('Y-axis')

# Result Matrix
axs[1].scatter(recoverd[:,:,0], recoverd[:,:,1], c='red', label='recoverd')
axs[1].set_title('Result Matrix (recoverd)')
axs[1].set_xlabel('X-axis')
axs[1].set_ylabel('Y-axis')

plt.show()

temp_3 = result_matrix.view(-1,2)
print(temp_3)
recoverd_matrix_1 = torch.matmul(temp_3,inverse_mult_matrix).view(rows,cols,2)
print(recoverd_matrix_1)
# recoverd_1 = torch.fmod(recoverd_matrix_1,rows)
# print(recoverd_1)

# Plot the original and result matrices
fig, axs = plt.subplots(1, 2, figsize=(10, 5))

# Original Coordinate Matrix
axs[0].scatter(coordinate_matrix[:,:,0], coordinate_matrix[:,:,1], c='blue', label='Original')
axs[0].set_title('Original Coordinate Matrix')
axs[0].set_xlabel('X-axis')
axs[0].set_ylabel('Y-axis')

# Result Matrix
axs[1].scatter(recoverd_matrix_1[:,:,0], recoverd_matrix_1[:,:,1], c='red', label='recoverd')
axs[1].set_title('Result Matrix (recoverd)')
axs[1].set_xlabel('X-axis')
axs[1].set_ylabel('Y-axis')

plt.show()
